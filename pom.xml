<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>org.ypq</groupId>
    <artifactId>shawshank</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>
    <modules>
        <module>product-api</module>
        <module>eureka-server</module>
        <module>product-service</module>
        <module>product-client</module>
    </modules>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <spring-boot-admin.version>2.0.2</spring-boot-admin.version>
        <spring-cloud.version>Finchley.SR1</spring-cloud.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>de.codecentric</groupId>
                <artifactId>spring-boot-admin-dependencies</artifactId>
                <version>${spring-boot-admin.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring-cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <pluginManagement>
            <plugins>
                <!-- Docker maven plugin -->
                <plugin>
                    <groupId>com.spotify</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>1.0.0</version>
                    <!--<executions>-->
                        <!--&lt;!&ndash;执行 mvn package 时 自动 执行 mvn docker:build&ndash;&gt;-->
                        <!--<execution>-->
                            <!--<id>build-image</id>-->
                            <!--<phase>package</phase>-->
                            <!--<goals>-->
                                <!--<goal>build</goal>-->
                            <!--</goals>-->
                        <!--</execution>-->
                    <!--</executions>-->
                    <configuration>
                        <!--推送到私有仓库-->
                        <!-- <imageName>localhost:5000/fox/fox-eureka-server</imageName> -->
                        <!--指定远程仓库-->
                        <dockerHost>http://127.0.0.1:2375</dockerHost>
                        <imageName>springboot/${project.artifactId}</imageName>
                        <imageTags>
                            <!--<imageTag>0.0.1</imageTag>-->
                            <!--可以指定多个标签-->
                            <imageTag>latest</imageTag>
                        </imageTags>
                        <!--覆盖已存在的标签 镜像-->
                        <forceTags>true</forceTags>
                        <!--使用pom 配置-->
                        <!--<baseImage>java</baseImage>-->
                        <!--<entryPoint>["java","-jar","/${project.build.finalName}.jar"]</entryPoint>-->
                        <!--使用pom 配置 END-->
                        <!--使用 Dockerfile-->
                        <dockerDirectory>${basedir}</dockerDirectory>
                        <!--使用 Dockerfile  END-->
                        <!-- 这里是复制 jar 包到 docker 容器指定目录配置，也可以写到 Docokerfile 中 -->
                        <!-- 没有这一句还不能顺利推送到远程仓库-->
                        <resources>
                            <resource>
                                <targetPath>/</targetPath>
                                <directory>${project.build.directory}</directory>
                                <include>${project.build.finalName}.jar</include>
                            </resource>
                        </resources>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>


</project>